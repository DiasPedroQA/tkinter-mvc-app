name: CI/CD Pipeline Complete

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  release:
    types: [published]

permissions:
  contents: read

jobs:

  ###########################################################
  # 1. Lint, Pre-commit e Análise Estática
  ###########################################################
  lint-and-style-check:
    name: 🧹 Lint, Pre-commit, Pylint and Flake8
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Instalar dependências para lint
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pre-commit flake8 pylint

      - name: 🧹 Executar pre-commit
        run: |
          pre-commit install
          pre-commit run --all-files

      - name: 🔍 Executar flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true

      - name: 🔎 Executar pylint
        run: pylint $(git ls-files '*.py')

  ###########################################################
  # 2. Build e Testes com cobertura
  ###########################################################
  build-and-test:
    name: 🧪 Build and Test with Coverage
    runs-on: ubuntu-latest
    needs: lint-and-style-check
    strategy:
      matrix:
        python-version: ["3.11"]
      fail-fast: false

    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 💾 Cache de dependências do pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 📦 Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install pytest pytest-cov

      - name: ✅ Executar testes com coverage
        run: |
          pytest --cov=. --cov-branch --cov-report=xml --junitxml=junit.xml
          coverage report --fail-under=80

      - name: 📤 Enviar coverage para Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          slug: DiasPedroQA/tkinter-mvc-app
          files: coverage.xml
          flags: unittests
          name: python-ci

      - name: 📄 Enviar resultados de testes para Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  ###########################################################
  # 3. Build de pacotes para releases
  ###########################################################
  release-build:
    name: 📦 Build Release Package
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: 📦 Build distributions
        run: |
          python -m pip install build
          python -m build

      - name: 📤 Upload dos artefatos de release
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  ###########################################################
  # 4. Publicação no PyPI
  ###########################################################
  pypi-publish:
    name: 🚀 Publicar no PyPI
    runs-on: ubuntu-latest
    needs: release-build
    if: github.event_name == 'release' && github.event.action == 'published'
    permissions:
      id-token: write

    steps:
      - name: 📥 Baixar artefatos
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: 🚀 Publicar no PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

  ###########################################################
  # 5. Deploy no servidor
  ###########################################################
  deploy:
    name: 🚀 Deploy to Server
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
